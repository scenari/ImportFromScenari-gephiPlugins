/*
 * LICENCE[[
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1/CeCILL 2.O 
 *
 * The contents of this file are subject to the Mozilla Public License Version 
 * 1.1 (the "License"); you may not use this file except in compliance with 
 * the License. You may obtain a copy of the License at http://www.mozilla.org/MPL/ 
 * 
 * Software distributed under the License is distributed on an "AS IS" basis, 
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
 * for the specific language governing rights and limitations under the 
 * License. 
 * 
 * The Original Code is kelis.fr code. 
 * 
 * The Initial Developer of the Original Code is 
 * thibaut.arribe@kelis.fr 
 * 
 * Portions created by the Initial Developer are Copyright (C) 2013
 * the Initial Developer. All Rights Reserved. 
 * 
 * Contributor(s): 
 * 
 * 
 * Alternatively, the contents of this file may be used under the terms of 
 * either of the GNU General Public License Version 2 or later (the "GPL"), 
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"), 
 * or the CeCILL Licence Version 2.0 (http://www.cecill.info/licences.en.html), 
 * in which case the provisions of the GPL, the LGPL or the CeCILL are applicable 
 * instead of those above. If you wish to allow use of your version of this file 
 * only under the terms of either the GPL or the LGPL, and not to allow others 
 * to use your version of this file under the terms of the MPL, indicate your 
 * decision by deleting the provisions above and replace them with the notice 
 * and other provisions required by the GPL or the LGPL. If you do not delete 
 * the provisions above, a recipient may use your version of this file under 
 * the terms of any one of the MPL, the GPL, the LGPL or the CeCILL.
 * ]]LICENCE
 */
package eu.scenari.gephi.importer;

import java.awt.Component;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.openide.WizardDescriptor;
import org.openide.WizardValidationException;
import org.openide.util.HelpCtx;

/**
 *
 * @author tha
 */
public class ScenariImporterPanel1 extends JPanel implements WizardDescriptor.Panel, ScenariImporterPanel {
    private List<ChangeListener> fListeners;
    private ScenariConnector fConnector;
    private boolean isInit = false;
    private ScenariImporterPanel2 fNextPanel;
    
    private String fUrlDataServer  = "http://";
    private String fUrlDataChain   = "http://127.0.0.1:";
    private String fUrlDataBuilder = "http://127.0.0.1:810X";
    private String fUrlDataFree    = "http://";  
    /**
     * Creates new form ScenariImporterPanel1
     */
    public ScenariImporterPanel1() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel4 = new javax.swing.JPanel();
        jsonParser1 = new eu.scenari.gephi.importer.JsonParser();
        fEnv = new javax.swing.JComboBox();
        jPanel3 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        fGetWorkspacesButton = new javax.swing.JButton();
        fUrlLabel = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        fUrlField = new javax.swing.JTextField();
        fPasswordLabel = new javax.swing.JLabel();
        fLoginLabel = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        fPasswordField = new javax.swing.JPasswordField();
        jPanel7 = new javax.swing.JPanel();
        fLoginField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        fEnvField = new javax.swing.JTextField();

        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(111, 111, 111)));

        setName("Select Datasource"); // NOI18N
        setLayout(new java.awt.BorderLayout());

        fEnv.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "SCENARIserver", "SCENARIchain", "SCENARIbuilder", "Free environnement configuration" }));
        fEnv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fEnvActionPerformed(evt);
            }
        });
        add(fEnv, java.awt.BorderLayout.PAGE_START);

        java.awt.GridBagLayout jPanel3Layout1 = new java.awt.GridBagLayout();
        jPanel3Layout1.columnWeights = new double[] {0.2, 0.8};
        jPanel3.setLayout(jPanel3Layout1);

        jPanel2.setMinimumSize(new java.awt.Dimension(410, 40));
        jPanel2.setPreferredSize(new java.awt.Dimension(410, 40));
        java.awt.FlowLayout flowLayout1 = new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT);
        flowLayout1.setAlignOnBaseline(true);
        jPanel2.setLayout(flowLayout1);

        org.openide.awt.Mnemonics.setLocalizedText(fGetWorkspacesButton, org.openide.util.NbBundle.getMessage(ScenariImporterPanel1.class, "ScenariImporterPanel1.fGetWorkspacesButton.text")); // NOI18N
        fGetWorkspacesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fGetWorkspacesButtonActionPerformed(evt);
            }
        });
        jPanel2.add(fGetWorkspacesButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        jPanel3.add(jPanel2, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(fUrlLabel, org.openide.util.NbBundle.getMessage(ScenariImporterPanel1.class, "ScenariImporterPanel1.fUrlLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel3.add(fUrlLabel, gridBagConstraints);

        fUrlField.setText(org.openide.util.NbBundle.getMessage(ScenariImporterPanel1.class, "ScenariImporterPanel1.fUrlField.text")); // NOI18N
        fUrlField.setMinimumSize(new java.awt.Dimension(400, 30));
        fUrlField.setPreferredSize(new java.awt.Dimension(400, 30));
        fUrlField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                fUrlFieldKeyReleased(evt);
            }
        });
        jPanel5.add(fUrlField);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        jPanel3.add(jPanel5, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(fPasswordLabel, org.openide.util.NbBundle.getMessage(ScenariImporterPanel1.class, "ScenariImporterPanel1.fPasswordLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        jPanel3.add(fPasswordLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(fLoginLabel, org.openide.util.NbBundle.getMessage(ScenariImporterPanel1.class, "ScenariImporterPanel1.fLoginLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel3.add(fLoginLabel, gridBagConstraints);

        fPasswordField.setText(org.openide.util.NbBundle.getMessage(ScenariImporterPanel1.class, "ScenariImporterPanel1.fPasswordField.text")); // NOI18N
        fPasswordField.setMinimumSize(new java.awt.Dimension(400, 30));
        fPasswordField.setPreferredSize(new java.awt.Dimension(400, 30));
        fPasswordField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fPasswordFieldKeyPressed(evt);
            }
        });
        jPanel6.add(fPasswordField);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        jPanel3.add(jPanel6, gridBagConstraints);

        fLoginField.setText(org.openide.util.NbBundle.getMessage(ScenariImporterPanel1.class, "ScenariImporterPanel1.fLoginField.text")); // NOI18N
        fLoginField.setMinimumSize(new java.awt.Dimension(400, 30));
        fLoginField.setPreferredSize(new java.awt.Dimension(400, 30));
        fLoginField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fLoginFieldKeyPressed(evt);
            }
        });
        jPanel7.add(fLoginField);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        jPanel3.add(jPanel7, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(ScenariImporterPanel1.class, "ScenariImporterPanel1.jLabel1.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        jPanel3.add(jLabel1, gridBagConstraints);
        jLabel1.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(ScenariImporterPanel1.class, "ScenariImporterPanel1.jLabel1.AccessibleContext.accessibleName")); // NOI18N

        fEnvField.setText(org.openide.util.NbBundle.getMessage(ScenariImporterPanel1.class, "ScenariImporterPanel1.fEnvField.text")); // NOI18N
        fEnvField.setEnabled(false);
        fEnvField.setMinimumSize(new java.awt.Dimension(400, 30));
        fEnvField.setPreferredSize(new java.awt.Dimension(400, 30));
        fEnvField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fEnvFieldKeyPressed(evt);
            }
        });
        jPanel1.add(fEnvField);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        jPanel3.add(jPanel1, gridBagConstraints);

        add(jPanel3, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void fEnvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fEnvActionPerformed
        switch(fEnv.getSelectedIndex()){
            case 0 :
                fUrlField.setEnabled(true);
                fLoginField.setEnabled(true);
                fPasswordField.setEnabled(true);
                fEnvField.setEnabled(false);
                fUrlField.setText(fUrlDataServer);
            break;
            
            case 1 :
                fUrlField.setEnabled(true);
                fLoginField.setEnabled(false);
                fPasswordField.setEnabled(false);
                fEnvField.setEnabled(false);
                fUrlField.setText(fUrlDataChain);
            break;
                
            case 2 :
                fUrlField.setEnabled(true);
                fLoginField.setEnabled(false);
                fPasswordField.setEnabled(false);
                fEnvField.setEnabled(false);
                fUrlField.setText(fUrlDataBuilder);
            break;
                
            case 3 :
                fUrlField.setEnabled(true);
                fLoginField.setEnabled(true);
                fPasswordField.setEnabled(true);
                fEnvField.setEnabled(true);
                fUrlField.setText(fUrlDataFree);
            break;
        }
        isInit = false;
        fireChangeEvent();
        
    }//GEN-LAST:event_fEnvActionPerformed

    private void fLoginFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fLoginFieldKeyPressed
        isInit = false;
        fireChangeEvent();
    }//GEN-LAST:event_fLoginFieldKeyPressed

    private void fPasswordFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fPasswordFieldKeyPressed
        isInit = false;
        fireChangeEvent();
    }//GEN-LAST:event_fPasswordFieldKeyPressed

    private void fEnvFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fEnvFieldKeyPressed
        isInit = false;
        fireChangeEvent();
    }//GEN-LAST:event_fEnvFieldKeyPressed

    private void fUrlFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fUrlFieldKeyReleased
        isInit = false;
        switch(fEnv.getSelectedIndex()){
            case 0 : fUrlDataServer  = fUrlField.getText(); break;
            case 1 : fUrlDataChain   = fUrlField.getText(); break;
            case 2 : fUrlDataBuilder = fUrlField.getText(); break;
            case 3 : fUrlDataFree    = fUrlField.getText(); break;        
        }
        fireChangeEvent();
    }//GEN-LAST:event_fUrlFieldKeyReleased

    private void fGetWorkspacesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fGetWorkspacesButtonActionPerformed
        fConnector.setUrl(fUrlField.getText());
        if(fLoginField.isEnabled() && !fLoginField.getText().isEmpty()){
            fConnector.setLogin(fLoginField.getText());
            fConnector.setPassword(new String(fPasswordField.getPassword()));
        }
        switch(fEnv.getSelectedIndex()){
            case 0 : fConnector.setEnvironnement("chain"); break;
            case 1 : fConnector.setEnvironnement("chain"); break;
            case 2 : fConnector.setEnvironnement("builder"); break;
            case 3 : fConnector.setEnvironnement(fEnvField.getText()); break;        
        }
        
        isInit = fConnector.initConnection();
        if(isInit && fNextPanel!= null) fNextPanel.setupList();
        else JOptionPane.showMessageDialog(this, org.openide.util.NbBundle.getMessage(ScenariImporterPanel1.class, "ScenariImporterPanel1.validatingConnectionError.text"), "Error", JOptionPane.ERROR_MESSAGE);
        fireChangeEvent();
    }//GEN-LAST:event_fGetWorkspacesButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox fEnv;
    private javax.swing.JTextField fEnvField;
    private javax.swing.JButton fGetWorkspacesButton;
    private javax.swing.JTextField fLoginField;
    private javax.swing.JLabel fLoginLabel;
    private javax.swing.JPasswordField fPasswordField;
    private javax.swing.JLabel fPasswordLabel;
    private javax.swing.JTextField fUrlField;
    private javax.swing.JLabel fUrlLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private eu.scenari.gephi.importer.JsonParser jsonParser1;
    // End of variables declaration//GEN-END:variables

    @Override
    public Component getComponent() {
        return this;
    }

    @Override
    public HelpCtx getHelp() {
        return HelpCtx.DEFAULT_HELP;
    }

    @Override
    public void readSettings(Object data) {
    }

    @Override
    public void storeSettings(Object data) {
    }

    @Override
    public void addChangeListener(ChangeListener cl) {
        if(fListeners == null) fListeners = new ArrayList<ChangeListener>();
        fListeners.add(cl);
    }

    @Override
    public void removeChangeListener(ChangeListener cl) {
        fListeners.remove(cl);
    }
    
    @Override
    public boolean isValid(){
        return isInit;
    }

    @Override
    public void setup(ScenariConnector pConnector) {
        fConnector = pConnector;
    }
    
    public void setNextPanel(ScenariImporterPanel2 pPanel){
        fNextPanel = pPanel;
    }
    
     protected final void fireChangeEvent() {
        Iterator<ChangeListener> it;
        it = new HashSet<ChangeListener>(fListeners).iterator();
        ChangeEvent ev = new ChangeEvent(this);
        while (it.hasNext()) {
            it.next().stateChanged(ev);
        }
    }

}
